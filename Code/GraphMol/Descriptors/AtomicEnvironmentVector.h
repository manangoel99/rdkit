//
//  Copyright (c) 2020, Manan Goel
//  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef AtomicEnvironmentVectorRDKIT_H_JUNE2020
#define AtomicEnvironmentVectorRDKIT_H_JUNE2020
// #ifdef RDK_HAS_EIGEN3

// #ifdef RDK_BUILD_DESCRIPTORS3D
#include <Eigen/Dense>
namespace RDKit {
class ROMol;
namespace Descriptors {
namespace ANI {
  const std::string AtomicEnvironmentVectorVersion = "1.0.0";

  //-------------------------------------------------------
  //! Generates a vector from the molecule containing encoding of each atom
  // such that H -> 0, C -> 1, N -> 2, O -> 3 and all other atoms -> -1
  /*!
    \param mol A mol object

    \return Vector containing encoding of atoms in the molecule
  */
  RDKIT_DESCRIPTORS_EXPORT Eigen::VectorXd GenerateSpeciesVector(const ROMol &mol);

  //! Computes radial terms of the torchANI style atom features
  /*!
    \param cutoff     Maximum distance between 2 atoms to show if they contribute to each other's environments
    \param distances  Distances between pairs of atoms which are in each other's neighbourhoods

    \return Radial terms according to each pair of distances in the molecule calculated using hard coded parameters
  */
  RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd RadialTerms(double cutoff, Eigen::ArrayXXd distances);

  //! Computes angular terms of the torchANI style atom features
  /*!
    \param cutoff     Maximum distance between 2 atoms to show if they contribute to each other's environments
    \param vector12   Pairs of vectors generated by a triplet of 3 atoms which are in each other's neighbourhoods

    \return Angular terms according to each pair of distances in the molecule calculated using hard coded parameters
  */
  RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd AngularTerms(double cutoff, Eigen::ArrayXXd vectors12);

  //! Calculates torchANI style symmetry functions combining both radial and angular terms
  /*!
    \param mol      Mol object for which symmetry functions are to be found
    \param confId   Conformer ID for the conformer for which symmetry functions are to be found

    \return numAtoms * 384 shaped matrix containing 384 features for every atom in the input mol consisting of both radial and angular terms
  */
  RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd AtomicEnvironmentVector(const ROMol &mol, int confId=-1);

} // namespace ANI
} // namespace Descriptors
} // namespace RDKit
#endif
// #endif
// #endif
