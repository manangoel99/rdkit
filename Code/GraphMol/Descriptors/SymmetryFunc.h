//
//  Copyright (c) 2020, Manan Goel
//  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef SymmetryFuncRDKIT_H_JUNE2020
#define SymmetryFuncRDKIT_H_JUNE2020
#ifdef RDK_HAS_EIGEN3

#ifdef RDK_BUILD_DESCRIPTORS3D
#include <Eigen/Dense>
namespace RDKit {
class ROMol;
namespace Descriptors {
const std::string SymmetryFuncVersion = "1.0.0";

//-------------------------------------------------------
//! Calculates the value a contnuous smoothening function for a distance such that values 
// greater than the cutoff give 0
/*!
  \param distances A 2 dimensional array of pairwise distances
  \param cutoff    A double value signifying cutoff distance

  \return 2 dimensional array containing corresponding values computed by cutoff function
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd cosine_cutoff(Eigen::ArrayXXd distances, double cutoff);

//! Generates a vector from the molecule containing encoding of each atom
// such that H -> 0, C -> 1, N -> 2, O -> 3 and all other atoms -> -1
/*!
  \param mol A mol object

  \return Vector containing encoding of atoms in the molecule
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::VectorXd generateSpeciesVector(const ROMol &mol);

//! Computes pairs of atoms that are neighbors bypassing duplication to make calculation faster
/*!
  \param coordinates  A matrix of size atoms * 3 containing coordinates of each atom
  \param species      A vector of size atoms containing mapping from atom index to encoding
  \param cutoff       Maximum distance within which 2 atoms are considered to be neighbours

  \return 2 dimensional array with 2 rows with each column corresponding to a pair of atoms which are neighbours
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXd neighbor_pairs(Eigen::ArrayXXd coordinates, Eigen::VectorXd species, double cutoff);

//! Computes radial terms of the torchANI style atom features
/*!
  \param cutoff     Maximum distance between 2 atoms to show if they contribute to each other's environments
  \param distances  Distances between pairs of atoms which are in each other's neighbourhoods
  
  \return Radial terms according to each pair of distances in the molecule calculated using hard coded parameters
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd radial_terms(double cutoff, Eigen::ArrayXXd distances);

//! Computes angular terms of the torchANI style atom features
/*!
  \param cutoff     Maximum distance between 2 atoms to show if they contribute to each other's environments
  \param vector12   Pairs of vectors generated by a triplet of 3 atoms which are in each other's neighbourhoods
  
  \return Angular terms according to each pair of distances in the molecule calculated using hard coded parameters
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd angular_terms(double cutoff, Eigen::ArrayXXd vectors12);

RDKIT_DESCRIPTORS_EXPORT std::vector<int> cumsum_from_zero(std::vector<int> count);

//! Calculates triplets of atoms according to pairs of atoms close to each other
/*!
  \param atom_index12_angular   Pairs of atoms close to each other according to defined cutoff

  \return pair of a vector containing indices of centrals atoms and Matrix containing pairs of their neighbours

  \verbatim
    Input: indices for pairs of atoms that are close to each other.
    each pair only appear once, i.e. only one of the pairs (1, 2) and
    (2, 1) exists.

    Output: indices for all central atoms and it pairs of neighbors. For
    example, if input has pair (0, 1), (0, 2), (0, 3), (0, 4), (1, 2),
    (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), then the output would have
    central atom 0, 1, 2, 3, 4 and for cental atom 0, its pairs of neighbors
    are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)
  \endverbatim
*/
RDKIT_DESCRIPTORS_EXPORT std::pair<std::vector<int>, Eigen::ArrayXXd> triple_by_molecules(Eigen::ArrayXXd atom_index12_angular);

RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd triu_index(int num_species);

//! Calculates torchANI style symmetry functions combining both radial and angular terms
/*!
  \param mol      Mol object for which symmetry functions are to be found
  \param confId   Conformer ID for the conformer for which symmetry functions are to be found

  \return numAtoms * 384 shaped matrix containing 384 features for every atom in the input mol consisting of both radial and angular terms
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd SymmetryFunc(const ROMol &mol, int confId=-1);

//! Constructs a vector with values of another vector at specified indices along given dimension
/*!
  \param vector1    Matrix in which values are to be stored
  \param vector2    Matrix from which values are to be taken
  \param index      Array which specifies indices of vector2
  \param dim        dimension along which indices are to be picked

  \return Matrix containing values at positions specified by index in vector2
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd index_select(Eigen::ArrayXXd vector1, Eigen::ArrayXXd vector2, Eigen::ArrayXd index, int dim);

//! Accumulate the elements of a Matrix into another Matrix by adding to the indices in the order given in index. 
/*!
  \param vector1    Matrix to which values are to be added
  \param vector2    Matrix from which values are to be added
  \param index      Indices in order of which values are added
  \param multi      Number of pairs to be considered
  \param numAtoms   Number of atoms in the molecules
  
  \return Matrix containing accumulated elements of vector2 into vector1 according to order given in index

  \verbatim
    Index[i] == j, then the ith row of vector2 is added to the jth row of vector1
  \endverbatim
*/
RDKIT_DESCRIPTORS_EXPORT Eigen::ArrayXXd index_add(Eigen::ArrayXXd vector1, Eigen::ArrayXXd vector2, Eigen::ArrayXXd index, int multi, int numAtoms);
} // namespace Descriptors
} // namespace RDKit
#endif
#endif
#endif